Introdu√ß√£o
Bem vindo a API Reference da Pagar.me !


A API Pagar.me foi desenvolvida de acordo com os melhores padr√µes REST.

As opera√ß√µes s√£o feitas por requisi√ß√µes aos endpoints, de acordo com os verbos HTTP, com corpos de mensagem em JSON. As respostas podem ser interpretadas atrav√©s do c√≥digo de status HTTP. Isso permite que quaisquer aplica√ß√µes consumam a API de forma simples e clara, independente da linguagem utilizada.

Para facilitar ainda mais a integra√ß√£o, fornecemos SDKs em todas as principais linguagens de programa√ß√£o. Saiba mais sobre as nossas SDKs.

Tamb√©m oferecemos uma chave de testes na API para que a integra√ß√£o seja feita com testes a vontade, sem se preocupar com cobran√ßas reais nos cart√µes de cr√©dito utilizados.


Seguran√ßa
Normas PCI Compliance


Para manter a seguran√ßa na troca de mensagens √© necess√°rio que nossos servidores sejam liberados no seu ambiente. Recomendamos fortemente que voc√™ libere o dom√≠nio: api.pagar.me. Caso n√£o seja poss√≠vel a libera√ß√£o do dom√≠nio, segue abaixo a lista de IP's que devem ser liberados:

üöß
IPs

52.186.34.80/28
104.45.183.192/28
52.186.34.84

Al√©m disso, por sermos uma empresa com certficado PCI Compliance precisamos manter a seguran√ßa na troca de informa√ß√µes com a nossa API. Seguem as configura√ß√µes aceitas:

üöß
Protocolos aceitos

TLS 1.2
TLS 1.3 (O Pagar.me recomenda fortemente a utiliza√ß√£o deste protocolo)

üöß
Hashs Codes

SHA256
SHA384
SHA512

üöß
Cipher Suites

Com criptografia igual ou superior a 128 bits.

üìò
Certificados Digitais SSL

O Pagar.me faz uso de uma tecnologia que provisiona de forma autom√°tica os certificados digitais das aplica√ß√µes dos seus dom√≠nios.

Esses certificados tem validade de 90 dias e por isso, recomendamos sempre aos clientes, o envio das transa√ß√µes para o nome (FQDN) dos endpoints das nossas APIs.

N√£o √© recomendado o pinning de certificado, com a chave p√∫blica.


IP Allowlist
√â poss√≠vel configurar uma lista de endere√ßos de IP que ter√£o permiss√£o para acessar o sistema Pagar.me utilizando a nossa funcionalidade de IP Allowlist.

Ao cadastrar os seus IPs, outros endere√ßos ser√£o bloqueados assim aumentando a seguran√ßa de sua integra√ß√£o, permitindo apenas conex√µes de fontes confi√°veis.

üìò
Formatos aceitos

IPs: xxx.xxx.xxx.xxx;

Intervalo de IPs (suporta formatos IPv4 e IPv6):

xxx.xxx.x.x
xxx.xxx.x.x/xx
192.168.0.10 - 192.168.10.20
2001:db8:3333:4444:5555:6666:7777:8888
fe80::/10
Para cadastrar a IP Allowlist, √© s√≥ seguir o passo a passo em nosso Guides - IP Allowlist


Rate Limit
O Rate limit controla o n√∫mero de solicita√ß√µes que um cliente pode fazer em um per√≠odo de tempo espec√≠fico em nossa API. Essa pr√°tica ajuda a manter a estabilidade da aplica√ß√£o.

Rate Limit - Tabela de quantidade m√°xima de requisi√ß√µes por minuto em cada endpoint:

Endpoint/Recurso	Metodo	Rate Limit por minuto
/charges	GET	200
/charges/*	GET	200
/charges/{{charge_id}}	DELETE	Somente para PIX: Ap√≥s a 10¬∞ tentativa de cancelamento de uma mesma cobran√ßa, permitimos somente uma nova tentativa a cada 15 minutos.
/orders	GET	200
/orders/*	GET	200
/recipients	GET	100
/recipients/*	GET	150
/subscriptions	GET	200
/subscriptions/*	GET	200
/invoices	GET	200
/invoices/*	GET	200
/customers	GET	200
/customers/*	GET	200
/hooks	GET	50
/hooks/*	GET	50
/payables	GET	700
/balance/operations	GET	300

Autentica√ß√£o
Obtendo sua Chave de API


Antes de come√ßar, voc√™ precisa obter suas chaves de API.
Para isso, siga os seguintes passos:
1 - Acesse este link e fa√ßa login com seu usu√°rio,
2 - Ap√≥s acessar o Dash, navegue at√© a √°rea de Desenvolvimento e em seguida clique em Chaves.

üìò
Clientes integrados na vers√£o anterior da API

Caso voc√™ j√° seja cliente Pagar.me e esteja integrado na vers√£o anterior da API, entre em contato com o nosso time de suporte.

üöß
Endpoints para teste e produ√ß√£o

As chamadas de testes e de produ√ß√£o devem ser feitas para o mesmo endpoint: https://api.pagar.me/core/v5.

O que definir√° se a transa√ß√£o ir√° utilizar o nosso simulador ou se seguir√° o fluxo de produ√ß√£o √© o tipo da Chave de API enviada.

Tipos de Chave
N√≥s disponibilizaremos 02 chaves para que voc√™ possa realizar testes:

Exemplo de prefixo da Chave Secreta de Sandbox: sk_test_*
Exemplo de prefixo da Chave P√∫blica de Sandbox: pk_test_*
Ap√≥s o fechamento do contrato o cliente receber√° as chaves do ambiente de produ√ß√£o:

Exemplo de prefixo da Chave Secreta de Produ√ß√£o: sk_*
Exemplo de prefixo da Chave P√∫blica de Produ√ß√£o: pk_*
Autoriza√ß√£o Basic Auth
Para se autenticar conosco voc√™ deve enviar a Chave de API no cabe√ßalho Authorization, seguindo o padr√£o da HTTP Basic Authentication.

Node.js

var fs = require('fs');
const request = require("request");
var body = JSON.parse(fs.readFileSync('body.json', 'utf8'));

var options = {                 
    method: 'POST',             
    uri: 'https://api.pagar.me/core/v5/orders',                    
    headers: {               
      'Authorization': 'Basic ' + Buffer.from("sk_test_*:").toString('base64'),
      'Content-Type': 'application/json'              
    },
    json : body
};    

request(options, function(error, response, body) {  
    console.log(response.body);
});
üìò
Como utilizar a SecretKey

Para montar a requisi√ß√£o Basic Auth, voc√™ deve utilizar a SecretKey da seguinte maneira:
User: SecretKey
Password: vazio

üìò
Chave P√∫blica de API (PK)

Essas chaves ser√£o utilizadas para representar a sua loja na integra√ß√£o com o checkout.

‚ùóÔ∏è
N√ÉO COMPARTILHE SUAS CHAVES DE API

A sua chave da API √© SECRETA e n√£o deve ser compartilhada com terceiros.

Erros
HTTP Status Codes

A nossa API valida cada um dos campos enviados na requisi√ß√£o antes de prosseguir com a cria√ß√£o, consulta ou gerenciamento dos pedidos, transa√ß√µes e recursos.

Utilizamos os c√≥digos de resposta convencionais do HTTP para indicar o sucesso ou a falha de uma requisi√ß√£o. Sendo assim, c√≥digos 2xx indicam sucesso, 4xx indicam erros por algum dado informado incorretamente (por exemplo, algum campo obrigat√≥rio n√£o enviado ou um cart√£o sem data de validade) e 5xx indicando erros nos servidores do Pagar.me.

Tabela dos HTTP Status Code:

C√≥digo	Status	Defini√ß√£o
200	OK	Sucesso
400	Bad Request	Requisi√ß√£o inv√°lida
401	Unauthorized	Chave de API inv√°lida
403	Forbidden	Bloqueio por IP/Dom√≠nio
404	Not Found	O recurso solicitado n√£o existe
412	Precondition Failed	Par√¢metros v√°lidos mas a requisi√ß√£o falhou
422	Unprocessable Entity	Par√¢metros inv√°lidos
429	Too Many Requests	Quantidade de requisi√ß√µes realizadas pelo IP maior que o permitido pela Pagar.me
500	Internal Server Error	Ocorreu um erro interno
Poss√≠veis erros
404 - Not Found

{
    "message": "Customer not found."
}
"Cliente n√£o encontrado": Ocorre quando n√£o identificamos o objeto customer ou customer_id na requisi√ß√£o de cria√ß√£o do pedido.

422 - Unprocessable Entity

{
    "message": "The request is invalid.",
    "errors": {
        "order.customer.name": [
            "The name field is required."
        ]
    },
  ...
"O campo nome √© obrigat√≥rio": Ocorre quando n√£o identificamos o campo name dentro do objeto customer. √â necess√°rio adicionar o nome do cliente aos dados informados na requisi√ß√£o de requisi√ß√£o de cria√ß√£o do pedido.

422 - Unprocessable Entity

{
    "message": "The request is invalid.",
    "errors": {
        "order.payments[0].credit_card.card": [
            "The number field is not a valid card number"
        ]
    },
  ...
"O campo do n√∫mero n√£o √© um n√∫mero de cart√£o v√°lido": Ocorre quando o campo number dentro do objeto card n√£o √© um n√∫mero de cart√£o v√°lido. √â necess√°rio revisar o n√∫mero do cart√£o informado na requisi√ß√£o de cria√ß√£o do pedido.

422 - Unprocessable Entity

{
    "message": "The request is invalid.",
    "errors": {
        "card.number": [
            "The field number must be a string with a minimum length of 13 and a maximum length of 19."
        ]
    },
  ...
"O n√∫mero do campo deve ser uma string com comprimento m√≠nimo de 13 e m√°ximo de 19": Ocorre quando o campo number tem a quantidade de caracteres incorreta. √â necess√°rio revisar o n√∫mero do cart√£o informado na requisi√ß√£o de cria√ß√£o do cart√£o.

422 - Unprocessable Entity

{
    "message": "The request is invalid.",
    "errors": {
        "order.items": [
            "The items field is required"
        ]
    },
  ...
"O campo itens √© obrigat√≥rio": Ocorre quando n√£o encontramos o objeto items na requisi√ß√£o. Para realizar a cria√ß√£o de um pedido, √© obrigat√≥rio informar os itens.

Poss√≠veis erros - Integra√ß√£o PSP
422 - Unprocessable Entity

...               
"gateway_response": {
    "code": "412",
    "errors": [
        {
            "message": "At least one customer phone is required."
        }
    ]
},
  ...
"√â necess√°rio pelo menos um telefone do cliente": O erro ocorre quando n√£o encontramos o objeto phones dentro do objeto customer. Para clientes Pagar.me PSP √© obrigat√≥rio enviar o telefone dentro junto aos dados do cliente. Mais sobre o objeto phones.

üìò
Dados obrigat√≥rios PSP x Gateway

A integra√ß√£o PSP ou Gateway afeta os dados necess√°rios para efetuar certas solicita√ß√µes, como a cria√ß√£o de um pedido.

Portanto, leve em considera√ß√£o o seu modelo de neg√≥cios ao seguir as orienta√ß√µes da nossa Refer√™ncia da API e consultar a assist√™ncia de nossas equipes de suporte.

Pagina√ß√£o

A API Pagar.me tem suporte a buscas em massa atrav√©s dos m√©todos list. Deste modo, voc√™ pode listar compradores, assinaturas, pedidos e diversos outros objetos do Pagar.me. Todos esses m√©todos de listagem possuem uma estrutura em comum, que √© a de pagina√ß√£o.

JSON

{
  "data": [...],
  "paging": {
    "total": 11,
    "previous": null,
    "next": "{url}?page=2&size=10"
  }
}

Metadata
A maioria dos nossos objetos - como customer, card, address, subscription, plan, order, charge e invoice - possuem o par√¢metro metadata, pelo qual voc√™ consegue armazenar dados chave-valor.

Metadados s√£o interessantes para o armazenamento estruturado de dados complementares relacionados a algum objeto. Um exemplo seria adi√ß√£o do nome do pai de um cliente para ter essa informa√ß√£o em sua carteira de clientes.

JSON

{
  ...
  "metadata": {
    "meu_campo1": "valor1",
    "meu_campo2": "valor2"
  }
}
Updated almost 2 years ago

Pagina√ß√£o

Telefones
O objeto phones possui os seguintes atributos:

Atributos	Tipo	Descri√ß√£o
home_phone	object	Telefone residencial.
mobile_phone	object	Telefone m√≥vel.
Tanto o home_phone quanto o mobile_phone s√£o compostos pelos seguintes atributos:

Atributos	Tipo	Descri√ß√£o
country_code	string	C√≥digo do Pa√≠s (Apenas num√©rico).
area_code	string	C√≥digo da √°rea (Apenas num√©rico).
number	string	N√∫mero do telefone (Apenas num√©rico).
JSON

"phones": {
  "home_phone": {
    "country_code": "55",
    "number": "000000000",
    "area_code": "21"
  },
  "mobile_phone": {
    "country_code": "55",
    "number": "000000000",
    "area_code": "21"
  }
}
Updated almost 4 years ago

Metadata

Entregas
O objeto shipping cont√©m informa√ß√µes referentes √† entrega do produto ao comprador, e possui os seguintes atributos:

Atributos	Tipo	Descri√ß√£o
amount	integer	Valor da entrega.
description	string	Descri√ß√£o da entrega.
recipient_name	string	Destinat√°rio da entrega.
recipient_phone	string	Telefone do destinat√°rio.
address	object	Endere√ßo de entrega. Saiba mais sobre endere√ßos.
max_delivery_date	string	Data de entrega m√°xima.
estimated_delivery_date	string	Data de entrega estimada.
type	string	Tipo de entrega.
JSON

"shipping" : {
    "amount": 100,
    "description": "Express Shipping",
    "recipient_name": "Tony Stark",
    "recipient_phone": "24586787867",
    "address": {
        "line_1": "10880, Malibu Point, Malibu Central",
        "zip_code": "90265",
        "city": "Malibu",
        "state": "CA",
        "country": "US"
    },
    "max_delivery_date": "2022-07-31",
  	"estimated_delivery_date": "2022-07-30",
    "type": "Express"
 }
Updated almost 2 years ago

Facilitadores de pagamento (Dados de Subadquirente)
Por determina√ß√£o do Banco Central e das bandeiras os cliente de E-commerce que se enquadram na categoria de Facilitadores de Pagamento dever√£o enviar dados referentes aos seus sub credenciados em cada requisi√ß√£o transacional.

O objeto SubMerchant possibilita o envio de informa√ß√£o de sub credenciados.
Um SubMerchant possui os seguintes atributos:

Atributos	Tipo	Descri√ß√£o
SubMerchant	object	Dados de sub credenciador
Merchant_Category_Code	string	MCC do subcredenciado - C√≥digo de categoria do estabelecimento comercial. Limite de quatro d√≠gitos.
Payment_Facilitator_Code	string	C√≥digo de identifica√ß√£o do Facilitador de pagamentos cadastrado com as bandeiras
Code	string	C√≥digo de identifica√ß√£o do sub credenciado para o facilitador de pagamentos
Name	string	Nome do sub credenciado.
Legal_name	string	Raz√£o social do sub credenciado.
Observa√ß√£o: Campo ser√° disponibilizado at√© o dia 04/04
Document	string	CPF ou CNPJ do sub credenciado.
Type	string	Tipo de sub credenciado. Valores poss√≠veis: individual e company.
Phones	object	Telefones do sub credenciado.
Phone_Type	string	Tipo do telefone do sub credenciado.
Coutry_code	string	C√≥digo do Pa√≠s (Apenas num√©rico).
Area_code	string	C√≥digo da √°rea (Apenas num√©rico).
Number	string	N√∫mero do telefone (Apenas num√©rico).
Address	object	Endere√ßo do sub credenciado.
Country	string	Pa√≠s (C√≥digo do pa√≠s no formato ISO 3166-1 alpha-2).
State	string	Estado.
(C√≥digo do estado no formato ISO 3166-2).
City	string	Cidade.
Neighborhood	string	Bairro.
Street	string	Rua.
Number	string	N√∫mero da rua.
Complement	string	Complemento.
Zip_Code	string	C√≥digo Postal (CEP)
(Apenas num√©rico).
Create Order
Create Order - Checkout
Create Subscription

{
    "submerchant": {
        "merchant_category_code": "4444",
        "payment_facilitator_code": "5555555",
        "code": "code2",
        "name": "sub tony stark",
        "legal_name": "empresa ltda",
        "document": "123456789",
        "type": "individual",
        "phone": {
            "country_code": "55",
            "number": "000000000",
            "area_code": "21"
        },
        "address": {
            "street": "malibu point",
            "number": "10880",
            "complement": "a",
            "neighborhood": "central malibu",
            "city": "malibu",
            "state": "ca",
            "country": "us",
            "zip_code": "24210460"
        }
    },
    "items": [
        {
            "amount": 2990,
            "description": "chaveiro do tesseract",
            "quantity": 1
        }
    ],
    "customer": {
        "name": "tony stark",
        "email": "{{email}}"
    },
    "ip": "192.168.0.1",
    "location": {
        "latitude": "10",
        "longitude": "20"
    },
    "session_id": "session_id_test",
    "device": {
        "platform": "android os"
    },
    "payments": [
        {
            "payment_method": "credit_card",
            "credit_card": {
                "installments": 1,
                "statement_descriptor": "avengers",
                "card": {
                    "number": "4000000000000010",
                    "holder_name": "tony stark",
                    "exp_month": 1,
                    "exp_year": 25,
                    "cvv": "351",
                    "billing_address": {
                        "street": "malibu point",
                        "number": "10880",
                        "zip_code": "90265",
                        "neighborhood": "central malibu",
                        "city": "malibu",
                        "state": "ca",
                        "country": "us"
                    }
                }
            }
        }
    ],
    "shipping": {
        "amount": 110,
        "description": "teste",
        "recipient_name": "marcelo",
        "type": "standard",
        "address": {
            "street": "malibu point",
            "number": "10882",
            "zip_code": "90265",
            "neighborhood": "central malibu",
            "city": "malibu",
            "state": "ca",
            "country": "us"
        }
    }
}

Vis√£o geral sobre Webhooks
Sempre que ocorre um evento importante, n√≥s disparamos uma notifica√ß√£o para seu servidor. Essas notifica√ß√µes s√£o chamadas de webhooks. √â poss√≠vel configurar varios endpoints e escolher quais eventos ser√£o disparados . O objeto webhook cont√™m os seguintes atributos:

Atributos	Tipo	Descri√ß√£o
id	string	C√≥digo do webhook. Formato: hook_XXXXXXXXXXXXXXXX.
url	string	Endere√ßo do alvo.
event	enum	Evento do webhook.
status	enum	Status do webhook. Valores poss√≠veis: pending, sent ou failed.
attempts	string	Tentativas realizadas.
last_attempt	datetime	Data da √∫ltima tentativa.
response_status	string	C√≥digo de resposta do servidor.
response_raw	string	Resposta do servidor.
account	object	Dados da loja.
account.id	string	C√≥digo da loja.
account.name	string	Nome da loja.
data	object	Conte√∫do da requisi√ß√£o.

Exemplo de webhook
Segue o exemplo de um webhook order.paid que n√≥s enviamos:

Webhook - order.paid

{
  "id": "hook_RyEKQO789TRpZjv5",
  "account": {
    "id": "acc_jZkdN857et650oNv",
    "name": "Lojinha"
  },
  "type": "order.paid",
  "created_at": "2017-06-29T20:23:47",
  "data": {
    "id": "or_ZdnB5BBCmYhk534R",
    "code": "1303724",
    "amount": 12356,
    "currency": "BRL",
    "closed": true,
    "items": [
      {
        "id": "oi_EqnMMrbFgBf0MaN1",
        "description": "Produto",
        "amount": 10166,
        "quantity": 1,
        "status": "active",
        "created_at": "2022-06-29T20:23:42",
        "updated_at": "2022-06-29T20:23:42"
      }
    ],
    "customer": {
      "id": "cus_oy23JRQCM1cvzlmD",
      "name": "FABIO ",
      "email": "abc@teste.com",
      "document": "09006068709",
      "type": "individual",
      "delinquent": false,
      "created_at": "2022-06-29T20:23:42",
      "updated_at": "2022-06-29T20:23:42",
      "phones": {}
    },
    "shipping": {
      "amount": 2190,
      "description": "Economico",
      "address": {
        "zip_code": "90265",
        "city": "Malibu",
        "state": "CA",
        "country": "US",
        "line_1": "10880, Malibu Point, Malibu Central"
      }
    },
    "status": "paid",
    "created_at": "2022-06-29T20:23:42",
    "updated_at": "2022-06-29T20:23:47",
    "closed_at": "2022-06-29T20:23:44",
    "charges": [
      {
        "id": "ch_d22356Jf4WuGr8no",
        "code": "1303624",
        "gateway_id": "da7f2304-1937-42a4-b995-0f4ea2b36264",
        "amount": 12356,
        "status": "paid",
        "currency": "BRL",
        "payment_method": "credit_card",
        "paid_at": "2022-06-29T20:23:47",
        "created_at": "2022-06-29T20:23:42",
        "updated_at": "2022-06-29T20:23:47",
        "customer": {
          "id": "cus_oybzJRQ231cvzlmD",
          "name": "FABIO E RACHEL ",
          "email": "fabiomello11@gmail.com",
          "document": "09006507709",
          "type": "individual",
          "delinquent": false,
          "created_at": "2022-06-29T20:23:42",
          "updated_at": "2022-06-29T20:23:42",
          "phones": {}
        },
        "last_transaction": {
          "id": "tran_opAqDj2390S1lKQO",
          "transaction_type": "credit_card",
          "gateway_id": "3b12320a-0d67-4c06-b497-6622fe9763c8",
          "amount": 12356,
          "status": "captured",
          "success": true,
          "installments": 2,
          "acquirer_name": "redecard",
          "acquirer_affiliation_code": "30233726",
          "acquirer_tid": "247391236",
          "acquirer_nsu": "247391236",
          "acquirer_auth_code": "236689",
          "operation_type": "capture",
          "card": {
            "id": "card_BjKOmahgAf0D23lw",
            "last_four_digits": "4485",
            "brand": "Visa",
            "holder_name": "FABIO",
            "exp_month": 6,
            "exp_year": 2025,
            "status": "active",
            "created_at": "2022-06-29T20:23:42",
            "updated_at": "2022-06-29T20:23:42",
            "billing_address": {
              "zip_code": "90265",
              "city": "Malibu",
              "state": "CA",
              "country": "US",
              "line_1": "10880, Malibu Point, Malibu Central"
            },
            "type": "credit"
          },
          "created_at": "2022-06-29T20:23:47",
          "updated_at": "2022-06-29T20:23:47",
          "gateway_response": {
            "code": "200"
          }
        }
      }
    ]
  }
}

Eventos de webhook
Atributos	Descri√ß√£o
customer.created	Ocorre sempre que um comprador √© criado.
customer.updated	Ocorre sempre que um comprador √© atualizado.
card.created	Ocorre sempre que um cart√£o √© criado.
card.updated	Ocorre sempre que um cart√£o √© atualizado.
card.deleted	Ocorre sempre que um cart√£o √© exclu√≠do.
address.created	Ocorre sempre que um endere√ßo √© criado.
address.updated	Ocorre sempre que um endere√ßo √© atualizado.
address.deleted	Ocorre sempre que um endere√ßo √© exclu√≠do.
card.expired	Ocorre sempre que um cart√£o expira a data de validade.
plan.created	Ocorre sempre que um plano √© criado.
plan.updated	Ocorre sempre que um plano √© atualizado.
plan.deleted	Ocorre sempre que um plano √© exclu√≠do.
plan_item.created	Ocorre sempre que um item de plano √© criado.
plan_item.updated	Ocorre sempre que um item de plano √© atualizado.
plan_item.deleted	Ocorre sempre que um item de plano √© exclu√≠do.
subscription.created	Ocorre sempre que uma assinatura √© criada.
subscription.canceled	Ocorre sempre que a assinatura √© cancelada.
subscription_item.created	Ocorre sempre que um item de assinatura √© criado.
subscription_item.updated	Ocorre sempre que um item de assinatura √© atualizado.
subscription_item.deleted	Ocorre sempre que um item de assinatura √© exclu√≠do.
discount.created	Ocorre sempre que um desconto √© criado.
discount.deleted	Ocorre sempre que um desconto √© exclu√≠do.
increment.created	Ocorre sempre que um incremento √© criado.
increment.deleted	Ocorre sempre que um incremento √© exclu√≠do.
order.paid	Ocorre sempre que um pedido √© pago.
order.payment_failed	Ocorre sempre que o pagamento de um pedido falha.
order.created	Ocorre sempre que um pedido √© criado.
order.canceled	Ocorre sempre que um pedido √© cancelado.
order_item.created	Ocorre sempre que um item do pedido √© criado .
order_item.updated	Ocorre sempre que um item do pedido √© atualizado.
order_item.deleted	Ocorre sempre que um item do pedido √© exclu√≠do.
order.closed	Ocorre sempre que um pedido √© fechado.
order.updated	Ocorre sempre que um pedido √© atualizado.
invoice.created	Ocorre sempre que uma fatura √© criada.
invoice.updated	Ocorre sempre que uma fatura √© atualizada.
invoice.paid	Ocorre sempre que uma fatura √© paga.
invoice.payment_failed	Ocorre sempre que o pagamento de uma fatura falha.
invoice.canceled	Ocorre sempre que uma fatura √© cancelada
charge.created	Ocorre sempre que uma cobran√ßa √© criada.
charge.updated	Ocorre sempre que uma cobran√ßa √© atualizado.
charge.paid	Ocorre sempre que uma cobran√ßa √© paga.
charge.payment_failed	Ocorre sempre que o pagamento de uma cobran√ßa falha.
charge.refunded	Ocorre sempre que uma cobran√ßa √© estornada.
charge.pending	Ocorre sempre que uma cobran√ßa √© pendente.
charge.processing	Ocorre sempre que uma cobran√ßa ainda est√° sendo processada.
charge.underpaid	Ocorre sempre que uma cobran√ßa foi paga a menos.
charge.overpaid	Ocorre sempre que uma cobran√ßa foi paga a mais.
charge.partial_canceled	Ocorre sempre que uma cobran√ßa foi parcialmente cancelada.
charge.chargedback	Ocorre sempre que uma cobran√ßa sofre chargeback.
usage.created	Ocorre sempre que o uso de um item no per√≠odo √© criado.
usage.deleted	Ocorre sempre que o uso de um item no per√≠odo √© exclu√≠do.
recipient.created	Ocorre sempre que um recebedor √© criado.
recipient.deleted	Ocorre sempre que um recebedor √© exclu√≠do.
recipient.updated	Ocorre sempre que um recebedor √© atualizado.
bank_account.created	Ocorre sempre que uma conta banc√°ria √© criada.
bank_account.updated	Ocorre sempre que uma conta banc√°ria √© atualizada.
bank_account.deleted	Ocorre sempre que uma conta banc√°ria √© exclu√≠do.
seller.created	Ocorre sempre que um vendedor e criado.
seller.updated	Ocorre sempre que um vendedor e editado.
seller.deleted	Ocorre sempre que um vendedor e deletado.
transfer.pending	Ocorre sempre que uma transfer√™ncia esta em processo pendente.
transfer.created	Ocorre sempre que uma transfer√™ncia e criada.
transfer.processing	Ocorre sempre que uma transfer√™ncia esta em processamento.
transfer.paid	Ocorre sempre que uma transfer√™ncia e paga.
transfer.canceled	Ocorre sempre que uma transfer√™ncia e cancelada.
transfer.failed	Ocorre sempre que uma transfer√™ncia ocorre falha.
checkout.created	Ocorre quando um checkout √© criado.
checkout.canceled	Ocorre quando um checkout √© cancelado.
checkout.closed	Ocorre quando um checkout √© fechado.
charge.antifraud_approved	Ocorre quando um pedido no antifraude √© aprovado.
charge.antifraud_reproved	Ocorre quando um pedido no antifraude √© reprovado.
charge.antifraud_manual	Ocorre quando um pedido no antifraude √© marcado para an√°lise manual.
charge.antifraud_pending	Ocorre quando um pedido est√° pendente de envio para a an√°lise do servi√ßo de antifraude.
Tokenizecard JS
Devido a preocupa√ß√µes de seguran√ßa, n√£o √© poss√≠vel transmitir dados sens√≠veis, como informa√ß√µes de cart√µes de pagamento, em servidores que n√£o estejam em conformidade com o Padr√£o de Seguran√ßa de Dados da Ind√∫stria de Cart√µes de Pagamento (PCI DSS).

O PCI DSS estabelece diretrizes rigorosas para proteger esses dados, e servidores n√£o conformes est√£o suscet√≠veis a ataques de hackers, vazamentos de dados, penalidades financeiras, danos √† reputa√ß√£o e responsabilidade legal. Portanto, oferecemos solu√ß√µes que evitam a necessidade de dados sens√≠veis passarem diretamente pelos seus servidores.

Uma dessas solu√ß√µes √© o 'tokenizecard.js', um script JavaScript desenvolvido pelo Pagar.me. Voc√™ pode integr√°-lo √† sua p√°gina de checkout sem afetar a apar√™ncia da sua loja. Desta forma, toda vez que um comprador clicar no bot√£o para finalizar o pedido, antes mesmo que o seu sistema monte a requisi√ß√£o para o Pagar.me, o nosso JavaScript captura os dados do cart√£o, manda direto para a nossa API e a nossa API devolve um token deste cart√£o.

O tokenizecard.js segue o seguinte fluxo:



üöß
Libera√ß√£o de Dom√≠nio

Para utilizar o tokenizecard.js √© necess√°rio cadastrar o dom√≠nio que far√° a requisi√ß√£o para a Pagar.me. A libera√ß√£o do dom√≠nio pode ser feita via dashboard nas configura√ß√µes de conta.

Integra√ß√£o com tokenizecard.js
Passo 1:
Na tag <form> insira o atributo data-pagarmecheckout-form para que o script identifique de onde ser√£o extra√≠dos os dados.

HTML

<form action="{{url de sua action}}" method="POST" data-pagarmecheckout-form>
   </form>
Passo 2:
Coloque nos campos <input> do seu formul√°rio os atributos "data-pagarmecheckout-element" correspondentes a cada um dos campos do cart√£o, conforme HTML abaixo. Estes ser√£o capturados pelo script para a gera√ß√£o do token na submiss√£o do formul√°rio.

HTML
HTML Multimeios

<form action="{{url de sua action}}" method="POST" data-pagarmecheckout-form>
    <input type="text" name="holder-name" data-pagarmecheckout-element="holder_name">
    <input type="text" name="card-number" data-pagarmecheckout-element="number">
    <span  data-pagarmecheckout-element="brand"></span>
    <input type="text" name="card-exp-month" data-pagarmecheckout-element="exp_month">
    <input type="text" name="card-exp-year" data-pagarmecheckout-element="exp_year">
    <input type="text" name="cvv" data-pagarmecheckout-element="cvv">
    <input type="text" name="buyer-name">
    <button type="submit">Enviar</button>
</form>
Quando o formul√°rio for submetido, o script vai gerar o token e retorn√°-lo de duas maneiras:

Atrav√©s do atributo "pagarmetoken" no POST realizado.
Inserindo um novo campo com o atributo "name=pagarmetoken" contendo o token gerado.
No caso de multimeios, para cada um dos formul√°rios √© feita uma requisi√ß√£o e no final √© gerado um campo com o atributo "pagarmetoken-x".

üëç
Campos adicionais podem ser inseridos

Quaisquer outros campos podem ser adicionados ao mesmo formul√°rio, sem o atributodata-pagarmecheckout-element, e estes ser√£o enviados normalmente ao seu servidor, sem a interven√ß√£o do script, como por exemplo, buyer-name.

üìò
A bandeira do cart√£o √© opcional

N√£o √© obrigat√≥rio enviar a bandeira do cart√£o. Se ela n√£o for enviada, o nosso sistema ir√° detect√°-la automaticamente.

üöß
Formatos v√°lidos para data de expira√ß√£o

O campo referente a data da expira√ß√£o do cart√£o pode ser informado de duas formas:

Em campo √∫nico, marcado como "exp_date" (O formato esperado √© MM-YY ou MM-YYYY)
Em dois campos, "exp_month" e "exp_year".
Passo 3
Deve ser inserido no final da sua p√°gina uma tag <script> com o tokenizecard.js e o atributo data-pagarmecheckout-app-id contendo sua Chave P√∫blica.

HTML

<script src="https://checkout.pagar.me/v1/tokenizecard.js"
        data-pagarmecheckout-app-id="{{sua chave p√∫blica}}">
    </script>
‚ùóÔ∏è
N√ÉO UTILIZE A SECRET_KEY DO LOJISTA

A autentica√ß√£o deste endpoint dever√° ser feita exclusivamente enviando a public_key do lojista no par√¢metro appId na query string. A secret_key de sua loja n√£o dever√° ser armazenada na p√°gina, t√£o pouco ser enviada na requisi√ß√£o.

Passo 4:
Depois de inserir o script √© preciso iniciar a detec√ß√£o dos campos com a chamada da fun√ß√£o PagarmeCheckout.init(). O m√©todoinit() pode receber 02 fun√ß√µes de callback:

success(data), para execu√ß√£o de qualquer l√≥gica de valida√ß√£o customizada.
fail(error), para tratamento de erros.
Quando a fun√ß√£o de callback success √© chamada recebe por par√¢metro um objeto data, que √© um JSON com o token gerado e os demais campos adicionais n√£o mapeados com data-pagarmecheckout-element. J√° a fun√ß√£o fail recebe por par√¢metro os detalhes do erro ocorrido.

JavaScript

<script>
        function success(data) {
            return true;
        };
    
        function fail(error) {
            console.error(error);
        };
    
        PagarmeCheckout.init(success,fail)
    </script>
üöß
Chamada da fun√ß√£o init

√â essencial que a chamada da fun√ß√£o esteja no startup da aplica√ß√£o. Recomendamos que a chamada seja feita no root da aplica√ß√£o(index.html) por√©m ela pode ser feita tamb√©m no init do seu framework/lib

üöß
Inclua o atributo "name" nos campos n√£o mapeados

√â importante que todos os campos adicionais n√£o mapeados possuam o atributo name, pois ele ser√° utilizado para definir o objeto JSON de retorno.

‚ùóÔ∏è
CAMPO MAPEADOS DEVEM ESTAR NO DOM

Todos os elementos mapeados pelo atributo data-pagarmecheckout-element devem estar no DOM (Document Object Model) quando a fun√ß√£o PagarmeCheckout.init() for chamada.

‚ùóÔ∏è
ABORTANDO O ENVIO DO PEDIDO

Voc√™ pode impedir o envio dos dados para os servidores da Pagar.me retornando o valor false na fun√ß√£o success.

Tokeniza√ß√£o

Caso n√£o seja poss√≠vel embarcar nosso script tokenizecard.js em sua p√°gina, voc√™ pode chamar diretamente a API de cria√ß√£o de tokens de cart√£o. Os dados de cart√£o dever√£o ser enviados para a API da Pagar.me antes de submeter o formul√°rio para o seu servidor. N√≥s retornaremos um objeto token, que dever√° ser utilizado em sua requisi√ß√£o, no lugar dos dados de cart√£o.

‚ùóÔ∏è
N√ÉO TRAFEGUE DADOS DE CART√ÉO EM SEU SERVIDOR

√â importante que voc√™ garanta que os dados abertos de cart√£o (n√∫mero, cvv, vencimento e nome do titular) n√£o ser√£o enviados para seu servidor.

üöß
O Token do cart√£o √© tempor√°rio

Os tokens de cart√£o tem tempo de expira√ß√£o de 60 segundos, e s√≥ poder√£o ser usados uma √∫nica vez. Se quiser armazenar de forma permanente o cart√£o em nosso sistema, leia mais sobre cart√µes.

O objeto token possui os seguinte atributos:

Atributos	Tipo	Descri√ß√£o
id	string	Token do cart√£o. Formato: token_XXXXXXXXXXXXXXXX
type	string	Tipo do token. Valor padr√£o: card.
created_at	datetime	Data de cria√ß√£o do token.
expires_at	datetime	Data de expira√ß√£o do token.
card	objeto	Dados do cart√£o.

Checkout Pagar.Me
Com o Checkout Pagar.me, oferecemos uma p√°gina de checkout desenvolvida por n√≥s e hospedada em nossos servidores. Desta forma, voc√™ n√£o precisa se preocupar em desenvolver essa interface.

Integra√ß√£o com o Checkout
Passo 1:
Envie uma requisi√ß√£o de cria√ß√£o de um pedido contendo ao menos um objeto em payments com o campo payment-method : checkout. Al√©m disso, inclua na requisi√ß√£o um objeto checkout com as informa√ß√µes referentes ao pagamento Saiba mais sobre o objeto Checkout.

JSON (Request)

{
   "items":[...],
   "customer":{...},
   "payments":[
      {   
         "amount" : 3000,
         "payment_method":"checkout",
         "checkout": {
            "expires_in":120,
            "billing_address_editable" : false,
            "customer_editable" : true,
            "accepted_payment_methods": ["credit_card"],
            "success_url": "https://www.pagar.me",
            "credit_card": {...}
         }
      }
   ]
}
Passo 2:
A resposta da requisi√ß√£o de cria√ß√£o de pedido conter√° um objeto checkout com o campo payment-url:

JSON (Response)

{
    "id": "or_GqAlNNOsDLcAlvbP",
    "code": "LKKMFJPU9M",
    "amount": 3000,
    "currency": "BRL",
    "closed": false,
    "items": [...],
    "customer": {...},
    "status": "pending",
    "created_at": "2018-03-28T18:48:49Z",
    "updated_at": "2018-03-28T18:48:49Z",
    "checkouts": [
        {
            "id": "chk_ON0Q6MU8EIWGY386",
            "amount": 3000,
            "status": "open",
            "success_url": "https://www.pagar.me",
            "payment_url": "https://api.pagar.me/checkout/v5/orders/chk_ON0Q6MU8EIWGY386",
            "customer_editable": true,
            "billing_address_editable": true,
            "skip_checkout_success_page": false,
            "created_at": "2018-03-28T18:48:49Z",
            "updated_at": "2018-03-28T18:48:49Z",
            "expires_at": "2018-03-28T20:48:49Z",
            "accepted_payment_methods": ["credit_card"],
            "customer": {...},
            "credit_card": {...},
            "billing_address": {...},
            "shippable": false,
            "currency": "BRL",
            "metadata": {...}
        }
    ]
}
Esta URL dever√° ser disponibilizada ao comprador por sua aplica√ß√£o. Ao acessar a URL o comprador ser√° redirecionado para o ambiente do Pagar.me para a realiza√ß√£o do pagamento. 