const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

// Fun√ß√£o para fazer login como admin
async function adminLogin() {
  try {
    const response = await axios.post(`${API_BASE}/auth/admin/login`, {
      email: 'admin@microsaas.com',
      password: 'admin123'
    });
    return response.data.data.token;
  } catch (error) {
    console.error('Erro no login:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para criar uma campanha com segmenta√ß√£o avan√ßada
async function createSegmentedCampaign(token) {
  try {
    const campaignData = {
      name: 'Campanha para M√£es de Primeira Viagem',
      type: 'email',
      subject: 'Dicas especiais para voc√™, mam√£e de primeira viagem!',
      content: 'Ol√°! Como m√£e de primeira viagem, sabemos que voc√™ tem muitas d√∫vidas. Aqui est√£o algumas dicas especiais para voc√™...',
      segment: 'primeira_vez',
      scheduledAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Amanh√£
      // Segmenta√ß√£o avan√ßada
      babyAgeMin: 0,
      babyAgeMax: 6,
      motherType: 'primeira_vez',
      planType: 'b√°sico',
      engagement: 'ativa',
      hasMultipleBabies: false,
      isPremium: false,
      isVerified: true,
      totalMemories: 5,
      totalActivities: 10
    };

    const response = await axios.post(`${API_BASE}/admin/marketing/campaigns`, campaignData, {
      headers: { Authorization: `Bearer ${token}` }
    });

    console.log('‚úÖ Campanha criada:', response.data.data);
    return response.data.data;
  } catch (error) {
    console.error('Erro ao criar campanha:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para obter estat√≠sticas de segmenta√ß√£o
async function getSegmentationStats(token) {
  try {
    const response = await axios.get(`${API_BASE}/admin/marketing/segmentation/stats`, {
      headers: { Authorization: `Bearer ${token}` }
    });

    console.log('üìä Estat√≠sticas de Segmenta√ß√£o:');
    console.log('Idade dos Beb√™s:', response.data.data.babyAgeStats);
    console.log('Tipo de M√£e:', response.data.data.motherTypeStats);
    console.log('Engajamento:', response.data.data.engagementStats);
    console.log('Planos:', response.data.data.planStats);

    return response.data.data;
  } catch (error) {
    console.error('Erro ao obter estat√≠sticas:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para calcular usu√°rios alvo
async function calculateTargetUsers(token) {
  try {
    const filters = {
      babyAgeMin: 0,
      babyAgeMax: 6,
      motherType: 'primeira_vez',
      planType: 'b√°sico',
      engagement: 'ativa',
      hasMultipleBabies: false,
      isPremium: false,
      isVerified: true
    };

    const response = await axios.post(`${API_BASE}/admin/marketing/segmentation/target-users`, filters, {
      headers: { Authorization: `Bearer ${token}` }
    });

    console.log('üéØ Usu√°rios Alvo:');
    console.log('Total encontrado:', response.data.data.totalCount);
    console.log('Primeiros 5 usu√°rios:', response.data.data.users.slice(0, 5));

    return response.data.data;
  } catch (error) {
    console.error('Erro ao calcular usu√°rios alvo:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para gerar conte√∫do com IA
async function generateAIContent(token) {
  try {
    const prompt = `Crie um e-mail de marketing para m√£es de primeira viagem com beb√™s de 0-6 meses. 
    O e-mail deve ser acolhedor, oferecer dicas pr√°ticas sobre sono e alimenta√ß√£o, 
    e incentivar o uso do app Baby Diary. Seja caloroso e emp√°tico.`;

    const response = await axios.post(`${API_BASE}/admin/marketing/campaigns/gemini`, { prompt }, {
      headers: { Authorization: `Bearer ${token}` }
    });

    console.log('ü§ñ Conte√∫do gerado pela IA:');
    console.log(response.data.aiResponse);

    return response.data.aiResponse;
  } catch (error) {
    console.error('Erro ao gerar conte√∫do com IA:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o principal
async function testSegmentation() {
  try {
    console.log('üöÄ Iniciando teste de segmenta√ß√£o avan√ßada...\n');

    // 1. Login como admin
    console.log('1Ô∏è‚É£ Fazendo login como admin...');
    const token = await adminLogin();
    console.log('‚úÖ Login realizado com sucesso\n');

    // 2. Obter estat√≠sticas de segmenta√ß√£o
    console.log('2Ô∏è‚É£ Obtendo estat√≠sticas de segmenta√ß√£o...');
    await getSegmentationStats(token);
    console.log('');

    // 3. Calcular usu√°rios alvo
    console.log('3Ô∏è‚É£ Calculando usu√°rios alvo...');
    await calculateTargetUsers(token);
    console.log('');

    // 4. Gerar conte√∫do com IA
    console.log('4Ô∏è‚É£ Gerando conte√∫do com IA...');
    await generateAIContent(token);
    console.log('');

    // 5. Criar campanha com segmenta√ß√£o
    console.log('5Ô∏è‚É£ Criando campanha com segmenta√ß√£o avan√ßada...');
    await createSegmentedCampaign(token);
    console.log('');

    console.log('üéâ Teste de segmenta√ß√£o conclu√≠do com sucesso!');
    console.log('\nüìã Resumo do que foi testado:');
    console.log('‚úÖ Login de admin');
    console.log('‚úÖ Estat√≠sticas de segmenta√ß√£o');
    console.log('‚úÖ C√°lculo de usu√°rios alvo');
    console.log('‚úÖ Gera√ß√£o de conte√∫do com IA');
    console.log('‚úÖ Cria√ß√£o de campanha com segmenta√ß√£o avan√ßada');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }
}

// Executar o teste
testSegmentation(); 