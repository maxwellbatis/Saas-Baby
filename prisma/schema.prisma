// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELOS DE AUTENTICAÇÃO E USUÁRIOS
model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  password      String
  avatarUrl     String?
  isActive      Boolean       @default(true)
  emailVerified Boolean       @default(false)
  phoneNumber   String?
  timezone      String        @default("America/Sao_Paulo")
  language      String        @default("pt-BR")
  preferences   Json          @default("{}") // Preferências do usuário
  lastLoginAt   DateTime?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  stripeCustomerId String?    // ID do cliente no Stripe
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  planId        String?
  plan          Plan?         @relation(fields: [planId], references: [id])
  subscription  Subscription?
  gamification  Gamification?
  babies        Baby[]
  activities    Activity[]
  memories      Memory[]
  milestones    Milestone[]
  growthRecords GrowthRecord[]
  sleepRecords  SleepRecord[]
  feedingRecords FeedingRecord[]
  diaperRecords DiaperRecord[]
  weightRecords WeightRecord[]
  vaccinationRecords VaccinationRecord[]
  familyMembers FamilyMember[]
  notifications Notification[]
  aiInteractions AIInteraction[]
  analytics     UserAnalytics?
  deviceTokens  DeviceToken[]
  emergencyContacts EmergencyContact[]
  symptomRecords SymptomRecord[]
  medicationRecords MedicationRecord[]
  appointmentRecords AppointmentRecord[]
  prenatalRecords PrenatalRecord[]
  userChallenges UserChallenge[]
  // Novas relações para gamificação avançada
  userAIRewards UserAIReward[]
  gamificationRankings GamificationRanking[]
  marketingInteractions MarketingInteraction[]
  // Novas relações para sistema de resgate manual
  purchases     UserPurchase[]
  missions      UserMission[]
  events        UserEvent[]
  pedidos       Pedido[]
}

// MODELOS DE ADMINISTRAÇÃO
model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("admin") // admin, super_admin
  isActive  Boolean  @default(true)
  permissions Json   @default("[]") // Permissões específicas
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  adminActions AdminAction[]
}

// MODELOS GERENCIÁVEIS PELO ADMIN
model Plan {
  id             String         @id @default(cuid())
  name           String         // Ex: "Básico", "Premium", "Família"
  price          Float          // Preço mensal
  yearlyPrice    Float?         // Preço anual (opcional)
  features       Json           // Lista de features: ["Feature 1", "Feature 2"]
  userLimit      Int            // Limite de bebês
  memoryLimit    Int?           // Limite de memórias por mês
  milestoneLimit Int?           // Limite de marcos por mês
  activityLimit  Int?           // Limite de atividades por mês
  aiLimit        Int?           // Limite de interações com IA por semana
  photoQuality   String         @default("low") // low, high
  familySharing  Int            @default(0) // Número de familiares que podem compartilhar
  exportFeatures Boolean        @default(false)
  prioritySupport Boolean       @default(false)
  aiFeatures     Boolean        @default(false) // Funcionalidades de IA
  offlineMode    Boolean        @default(false) // Modo offline
  stripeProductId String?        @unique // ID do Produto no Stripe
  stripePriceId  String         @unique // ID do preço no Stripe
  stripeYearlyPriceId String?   // ID do preço anual no Stripe
  isActive       Boolean        @default(true)
  sortOrder      Int            @default(0) // Para ordenação
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  users          User[]
  subscriptions  Subscription[]
}

model Subscription {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id])
  planId                String
  plan                  Plan     @relation(fields: [planId], references: [id])
  stripeSubscriptionId  String   @unique
  stripeCustomerId      String?
  status                String   // active, canceled, past_due, trialing
  currentPeriodStart    DateTime?
  currentPeriodEnd      DateTime?
  cancelAtPeriodEnd     Boolean  @default(false)
  trialEndsAt           DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  subscriptionEvents    SubscriptionEvent[]
}

model LandingPageContent {
  id            Int      @id @default(1) // Só haverá uma linha nesta tabela
  heroTitle     String
  heroSubtitle  String
  heroImage     String?
  features      Json     // [{ "title": "...", "description": "...", "icon": "..." }]
  testimonials  Json     // [{ "name": "...", "text": "...", "rating": 5 }]
  faq           Json     // [{ "question": "...", "answer": "..." }]
  stats         Json     // [{ "label": "...", "value": "...", "description": "..." }]
  ctaText       String?
  ctaButtonText String?
  seoTitle      String?
  seoDescription String?
  seoKeywords   String?
  updatedAt     DateTime @updatedAt
}

model GamificationRule {
  id          String   @id @default(cuid())
  name        String   // Ex: "Login Diário", "Primeiro Cadastro"
  description String
  points      Int      // Pontos ou recompensa
  condition   String   // Lógica da condição (ex: "login_streak_5")
  badgeIcon   String?
  category    String   // daily, milestone, special, weekly_challenge
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Gamification {
  id      String   @id @default(cuid())
  userId  String   @unique
  user    User     @relation(fields: [userId], references: [id])
  points  Int      @default(0)
  level   Int      @default(1)
  badges  Json     @default("[]") // Lista de badges conquistados
  streaks Json     @default("{}") // {"login": 0, "activities": 0, "memories": 0}
  achievements Json @default("[]") // Conquistas especiais
  // Novos campos para gamificação avançada
  totalActivities   Int       @default(0)
  totalMemories     Int       @default(0)
  totalMilestones   Int       @default(0)
  totalGrowthRecords Int       @default(0)
  totalVaccineRecords Int       @default(0)
  totalSymptomRecords Int       @default(0)
  totalMedicationRecords Int       @default(0)
  totalAppointmentRecords Int       @default(0)
  lastLoginDate     DateTime?
  dailyGoal         Int       @default(100)
  dailyProgress     Int       @default(0)
  weeklyChallenges  Json      @default("[]") // Desafios semanais ativos
  aiRewards         Json      @default("[]") // Recompensas de IA desbloqueadas
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model NotificationTemplate {
  id        String @id @default(cuid())
  name      String @unique // Ex: "welcome_email", "subscription_canceled"
  type      String // email, push, sms
  subject   String
  body      String // Template do corpo do email/notificação (pode usar variáveis como {{name}})
  variables Json   @default("[]") // Variáveis disponíveis no template
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NOVOS MODELOS PARA FUNCIONALIDADES AVANÇADAS

// Colaboração Familiar
model FamilyMember {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  name        String
  email       String?
  phoneNumber String?
  relationship String  // pai, mãe, avó, avô, tio, tia, babá
  permissions Json     @default("[]") // Permissões específicas
  isActive    Boolean  @default(true)
  invitedAt   DateTime @default(now())
  acceptedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Notificações Push
model DeviceToken {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  token       String   @unique
  platform    String   // ios, android, web
  deviceInfo  Json     @default("{}")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String   // push, email, sms
  title       String
  body        String
  data        Json     @default("{}") // Dados adicionais
  status      String   @default("pending") // pending, sent, failed, read
  scheduledAt DateTime?
  sentAt      DateTime?
  readAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Integração com IA (Groq)
model AIInteraction {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String   // sleep_analysis, feeding_tips, milestone_prediction, cry_interpretation
  input       Json     // Dados de entrada
  output      Json     // Resposta da IA
  model       String   // Modelo usado (llama-3.3-70b-versatile, etc.)
  tokensUsed  Int?
  cost        Float?
  createdAt   DateTime @default(now())
}

// Analytics e Métricas
model UserAnalytics {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  loginCount  Int      @default(0)
  lastLoginAt DateTime?
  sessionDuration Int  @default(0) // em minutos
  featuresUsed Json    @default("[]") // Features mais usadas
  retentionScore Float @default(0)
  churnRisk   Float    @default(0)
  updatedAt   DateTime @updatedAt
}

model SystemAnalytics {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  metric      String   // new_users, active_users, revenue, etc.
  value       Float
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())
}

// Contatos de Emergência
model EmergencyContact {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  name        String
  relationship String
  phoneNumber String
  isPrimary   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Eventos de Assinatura
model SubscriptionEvent {
  id          String   @id @default(cuid())
  subscriptionId String
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  event       String   // created, updated, canceled, renewed
  data        Json     @default("{}")
  createdAt   DateTime @default(now())
}

// Ações do Admin
model AdminAction {
  id          String   @id @default(cuid())
  adminId     String
  admin       Admin    @relation(fields: [adminId], references: [id])
  action      String   // create_plan, update_content, etc.
  target      String?  // ID do recurso afetado
  data        Json     @default("{}")
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
}

// MODELOS ESPECÍFICOS DO BABY DIARY
model Baby {
  id          String   @id @default(cuid())
  name        String
  gender      String?  // male, female
  birthDate   DateTime
  photoUrl    String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  isActive    Boolean  @default(true)
  preferences Json     @default("{}") // Preferências específicas do bebê
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  activities  Activity[]
  memories    Memory[]
  milestones  Milestone[]
  growthRecords GrowthRecord[]
  sleepRecords SleepRecord[]
  feedingRecords FeedingRecord[]
  diaperRecords DiaperRecord[]
  weightRecords WeightRecord[]
  vaccinationRecords VaccinationRecord[]
  symptomRecords SymptomRecord[]
  medicationRecords MedicationRecord[]
  appointmentRecords AppointmentRecord[]
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // sleep, feeding, diaper, weight, milestone, memory
  title       String
  description String?
  photoUrl    String?
  babyId      String
  baby        Baby     @relation(fields: [babyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  date        DateTime @default(now())
  duration    Int?     // em minutos
  notes       String?
  tags        Json     @default("[]")
  location    Json     @default("{}") // Coordenadas GPS
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Memory {
  id          String   @id @default(cuid())
  title       String
  description String
  photoUrl    String?
  babyId      String
  baby        Baby     @relation(fields: [babyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  date        DateTime @default(now())
  tags        Json     @default("[]")
  isPublic    Boolean  @default(false)
  sharedWith  Json     @default("[]") // IDs dos familiares com quem foi compartilhado
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Milestone {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   // motor, cognitive, social, language
  babyId      String
  baby        Baby     @relation(fields: [babyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  date        DateTime @default(now())
  photoUrl    String?
  isPredicted Boolean  @default(false) // Se foi previsto pela IA
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GrowthRecord {
  id          String   @id @default(cuid())
  height      Float?   // em cm
  weight      Float?   // em kg
  headCircumference Float? // em cm
  babyId      String
  baby        Baby     @relation(fields: [babyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  date        DateTime @default(now())
  notes       String?
  percentile  Json     @default("{}") // Percentis da OMS
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SleepRecord {
  id          String   @id @default(cuid())
  startTime   DateTime
  endTime     DateTime?
  duration    Int?     // em minutos
  quality     String?  // good, fair, poor
  babyId      String
  baby        Baby     @relation(fields: [babyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  notes       String?
  environment Json     @default("{}") // Temperatura, ruído, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FeedingRecord {
  id          String   @id @default(cuid())
  type        String   // breast, bottle, solid
  amount      Float?   // em ml ou gramas
  duration    Int?     // em minutos
  babyId      String
  baby        Baby     @relation(fields: [babyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  date        DateTime @default(now())
  notes       String?
  foodType    String?  // Tipo específico de alimento
  reaction    String?  // Reação do bebê
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DiaperRecord {
  id          String   @id @default(cuid())
  type        String   // wet, dirty, both
  babyId      String
  baby        Baby     @relation(fields: [babyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  date        DateTime @default(now())
  notes       String?
  consistency String?  // Consistência (para fraldas sujas)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WeightRecord {
  id          String   @id @default(cuid())
  weight      Float    // em kg
  babyId      String
  baby        Baby     @relation(fields: [babyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  date        DateTime @default(now())
  notes       String?
  percentile  Float?   // Percentil da OMS
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VaccinationRecord {
  id          String   @id @default(cuid())
  name        String
  date        DateTime
  nextDueDate DateTime?
  babyId      String
  baby        Baby     @relation(fields: [babyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  notes       String?
  batchNumber String?  // Número do lote da vacina
  clinic      String?  // Clínica onde foi aplicada
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SuggestedMilestone {
  id        String   @id @default(cuid())
  title     String   @unique
  category  String   // gravidez, nascimento, primeiro_ano, etc
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  icon      String?  // opcional, para frontend
}

model SymptomRecord {
  id          String   @id @default(cuid())
  description String
  intensity   String?  // leve, moderado, forte
  startDate   DateTime
  endDate     DateTime?
  babyId      String
  baby        Baby     @relation(fields: [babyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  notes       String?
  photoUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MedicationRecord {
  id          String   @id @default(cuid())
  name        String
  dosage      String
  frequency   String
  startDate   DateTime
  endDate     DateTime?
  reason      String?
  babyId      String
  baby        Baby     @relation(fields: [babyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AppointmentRecord {
  id          String   @id @default(cuid())
  date        DateTime
  specialty   String
  doctor      String?
  location    String?
  reason      String?
  babyId      String
  baby        Baby     @relation(fields: [babyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PrenatalRecord {
  id          String   @id @default(cuid())
  date        DateTime
  description String
  type        String   // consulta, exame, vacina, sintoma
  result      String?
  doctor      String?
  location    String?
  notes       String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Challenge {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String
  type        String // weekly, unique, event
  goal        Int    // meta numérica (ex: 5 atividades)
  progressType String // activities, memories, login, etc
  points      Int
  badge       String?
  isActive    Boolean @default(true)
  startDate   DateTime?
  endDate     DateTime?
  userChallenges UserChallenge[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserChallenge {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  progress    Int      @default(0)
  completedAt DateTime?
  status      String   @default("in_progress") // in_progress, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Novos modelos para gamificação avançada
model WeeklyChallenge {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String   // Ícone do desafio
  category    String   // sleep, memory, activity, consistency
  goal        Int      // Meta numérica
  reward      String   // Descrição da recompensa
  points      Int      // Pontos ganhos
  isActive    Boolean  @default(true)
  weekStart   DateTime // Início da semana
  weekEnd     DateTime // Fim da semana
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AIReward {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String   // tip, activity, milestone, encouragement
  isActive    Boolean  @default(true)
  unlockCondition String // Condição para desbloquear
  sortOrder   Int      @default(0)
  content     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userRewards UserAIReward[]
}

model UserAIReward {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  rewardId    String
  reward      AIReward @relation(fields: [rewardId], references: [id])
  isUnlocked  Boolean  @default(false)
  unlockedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GamificationRanking {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  week        Int      // Número da semana do ano
  year        Int      // Ano
  points      Int      @default(0)
  rank        Int?     // Posição no ranking
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, week, year])
}

// SISTEMA DE RESGATE MANUAL - LOJA DE RECOMPENSAS
model ShopItem {
  id          Int      @id @default(autoincrement())
  slug        String   @unique // URL amigável baseada no nome
  name        String
  description String
  type        String   // theme, feature, bonus, cosmetic
  category    String   // premium, basic, seasonal (deprecado, usar categoryId)
  price       Int      // Pontos necessários
  imageUrl    String?
  isActive    Boolean  @default(true)
  isLimited   Boolean  @default(false)
  stock       Int?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  purchases   UserPurchase[]
  // Novas relações
  categoryId  String?
  categoryObj Category? @relation(fields: [categoryId], references: [id])
  tags        ShopItemTag[]
  // Campos avançados para e-commerce
  gallery     Json?    // Galeria de imagens (array de URLs)
  promoPrice  Int?     // Preço promocional em centavos
  coupon      String?  // Código de cupom
  promoStart  DateTime? // Início da promoção
  promoEnd    DateTime? // Fim da promoção
  mainImage   String?  // Imagem principal destacada
  isPromo     Boolean? @default(false) // Produto está em promoção
  // Campos para variações e código do produto
  sku         String?  // Código do produto (SKU)
  variations  Json?    // Variações flexíveis do produto (cor, tamanho, peso, etc.)
}

model UserPurchase {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  itemId      Int
  item        ShopItem @relation(fields: [itemId], references: [id])
  pointsSpent Int
  purchasedAt DateTime @default(now())
}

// SISTEMA DE MISSÕES DIÁRIAS
model DailyMission {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String   // login, memory, activity, milestone, streak
  goal        Int      // Meta numérica
  points      Int      // Pontos de recompensa
  icon        String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userMissions UserMission[]
}

model UserMission {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  missionId   String
  mission     DailyMission @relation(fields: [missionId], references: [id])
  progress    Int      @default(0)
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  assignedAt  DateTime @default(now())
  expiresAt   DateTime // Fim do dia
}

// SISTEMA DE EVENTOS ESPECIAIS
model SpecialEvent {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String   // seasonal, challenge, celebration
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  rewards     Json     @default("[]") // Recompensas especiais
  challenges  Json     @default("[]") // Desafios do evento
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userEvents  UserEvent[]
}

model UserEvent {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  eventId     String
  event       SpecialEvent @relation(fields: [eventId], references: [id])
  progress    Json     @default("{}") // Progresso nos desafios
  rewards     Json     @default("[]") // Recompensas conquistadas
  joinedAt    DateTime @default(now())
  completedAt DateTime?
}

model MarketingCampaign {
  id          String   @id @default(cuid())
  name        String
  type        String   // email, push, sms, inapp
  content     String   // Texto da campanha (pode ser gerado pela IA)
  subject     String?  // Para email
  segment     String   // Ex: "novas_mamaes", "premium", "inativas"
  status      String   @default("draft") // draft, scheduled, sent, failed
  scheduledAt DateTime?
  sentAt      DateTime?
  createdBy   String   // Admin que criou
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  aiPrompt    String?  // Prompt enviado para Gemini
  aiResponse  String?  // Resposta da Gemini
  
  // Segmentação avançada
  babyAgeMin  Int?     // Idade mínima do bebê em meses
  babyAgeMax  Int?     // Idade máxima do bebê em meses
  motherType  String?  // primeira_vez, experiente, gestante, etc
  planType    String?  // basic, premium, family
  engagement  String?  // ativa, inativa, nova, retornando
  daysInactive Int?    // Dias inativos para segmentação
  hasMultipleBabies Boolean? // Famílias com mais de 1 bebê
  isPremium   Boolean? // Usuários premium
  isVerified  Boolean? // Email verificado
  lastActivityDays Int? // Última atividade há X dias
  totalMemories Int?   // Total de memórias (para segmentar por engajamento)
  totalActivities Int? // Total de atividades
  interactions MarketingInteraction[]
}

model MarketingInteraction {
  id          String   @id @default(cuid())
  campaignId  String
  campaign    MarketingCampaign @relation(fields: [campaignId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  status      String   // sent, opened, clicked, failed
  sentAt      DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?
  error       String?
}

// BIBLIOTECA DE MARKETING DIGITAL
model SocialMediaPost {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   // motivacional, beneficio, funcionalidade, depoimento, comemorativo
  platform    String   // instagram, facebook, tiktok, whatsapp, linkedin
  contentType String   // post, story, reel, video, carousel
  imageUrl    String?
  videoUrl    String?
  caption     String   // Legenda pronta para copiar
  hashtags    String   // Hashtags sugeridas
  cta         String?  // Call to action
  targetAudience String // gestantes, maes_bebes, maes_criancas
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // Admin que criou
}

model Advertisement {
  id          String   @id @default(cuid())
  title       String
  platform    String   // facebook, instagram, google_ads, tiktok
  adType      String   // image, video, carousel, story
  copyShort   String   // Copy curta (até 125 caracteres)
  copyLong    String   // Copy longa
  headline    String   // Título do anúncio
  description String   // Descrição do anúncio
  cta         String   // Call to action
  imageUrl    String?
  videoUrl    String?
  targetAudience String // Segmentação sugerida
  interests   Json     @default("[]") // Interesses para segmentação
  budget      Float?   // Orçamento sugerido
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // Admin que criou
}

model VideoContent {
  id          String   @id @default(cuid())
  title       String
  description String
  platform    String   // instagram, tiktok, youtube, facebook
  videoType   String   // reel, story, tutorial, testimonial, promotional
  duration    Int      // Duração em segundos
  videoUrl    String?
  thumbnailUrl String?
  script      String   // Roteiro completo
  music       String?  // Sugestão de música
  hashtags    String   // Hashtags para o vídeo
  targetAudience String // Público alvo
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // Admin que criou
}

model SalesArgument {
  id          String   @id @default(cuid())
  title       String
  category    String   // emocional, escassez, pertencimento, racional, urgencia
  argument    String   // Argumento principal
  examples    Json     @default("[]") // Exemplos de uso
  targetAudience String // Público alvo
  conversionRate Float? // Taxa de conversão estimada
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // Admin que criou
}

model AffiliateLink {
  id          String   @id @default(cuid())
  name        String   // Nome do afiliado ou campanha
  baseUrl     String   // URL base
  utmSource   String   // Fonte (ex: instagram, facebook)
  utmMedium   String   // Meio (ex: social, email)
  utmCampaign String   // Campanha
  utmContent  String?  // Conteúdo específico
  utmTerm     String?  // Termo de busca
  fullUrl     String   // URL completa com parâmetros
  clicks      Int      @default(0)
  conversions Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // Admin que criou
}

// CALENDÁRIO EDITORIAL
model ScheduledPost {
  id          String   @id @default(cuid())
  title       String
  content     String
  platform    String   // instagram, facebook, tiktok, youtube
  contentType String   // post, story, reel, video, ad
  scheduledAt DateTime
  status      String   @default("scheduled") // draft, scheduled, published, failed
  imageUrl    String?
  videoUrl    String?
  hashtags    String?
  targetAudience String
  category    String   // motivacional, beneficio, funcionalidade, depoimento, comemorativo
  isActive    Boolean  @default(true)
  createdBy   String   // Admin que criou
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Pedido {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  status         String   // pending, paid, failed, canceled, refunded
  paymentMethod  String?  // stripe, pagarme
  paymentId      String?  // ID do pagamento (Stripe Payment Intent ou Pagar.me Order)
  totalAmount    Float    // valor total em reais
  customerInfo   Json?    // informações do cliente
  shippingAddress Json?   // endereço de entrega
  items          Json     // lista de produtos
  metadata       Json?    // dados adicionais (session ID, etc.)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// ===== CATEGORIAS E TAGS DA LOJA =====
model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  shopItems   ShopItem[]
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  shopItems   ShopItemTag[]
}

model ShopItemTag {
  id          String   @id @default(cuid())
  shopItemId  Int
  shopItem    ShopItem @relation(fields: [shopItemId], references: [id])
  tagId       String
  tag         Tag      @relation(fields: [tagId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([shopItemId, tagId])
}

// ===== BANNERS DA LOJA =====
model Banner {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  description String
  imageUrl    String
  bgGradient  String?  // Classe CSS do gradiente
  ctaText     String   // Texto do botão
  ctaLink     String   // Link do botão
  badge       String?  // Texto do badge
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  startDate   DateTime?
  endDate     DateTime?
  targetUrl   String?  // URL de destino (produto, categoria, etc.)
  targetType  String?  // product, category, external
  targetId    String?  // ID do produto/categoria
  location    String   @default("loja") // loja, dashboard, ambos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // ID do admin que criou
}